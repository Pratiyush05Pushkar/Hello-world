---
# Source: devlake/charts/grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
  name: devlake-grafana
  namespace: default
---
# Source: devlake/charts/grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: devlake-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  admin-user: "YWRtaW4="
  admin-password: "QzhldnZFQ2JqMlV4ckgwQnRiTjZWMHkzRkNQcnBUemg0Qkpabkd2WA=="
  ldap-toml: ""
---
# Source: devlake/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: devlake-mysql-auth
stringData:
  MYSQL_USER: "merico"
  MYSQL_PASSWORD: "merico"
  MYSQL_DATABASE: "lake"
  MYSQL_ROOT_PASSWORD: "admin"
  DB_URL: "mysql://merico:merico@devlake-mysql:3306/lake?charset=utf8mb4&parseTime=True&loc=UTC"
  MYSQL_URL: "devlake-mysql:3306"
#
---
# Source: devlake/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: devlake-encryption-secret
stringData:
  ENCRYPTION_SECRET: RLMXHYIVKKVAPJGGWFHVGYUFONVSXTMCKMKBFMDTHJQWSGRUWOZUGSXTBKKQYSJCNOXCGWBKRZVBOGPEMGNTBXIGOQBZWUDCLVQMETCOCSTWZEPXEWFQVQDYHAFUSOKM
---
# Source: devlake/charts/grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: devlake-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain = ''
    root_url = %(protocol)s://%(domain)s/grafana
---
# Source: devlake/charts/grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
  name: devlake-grafana-clusterrole
rules: []
---
# Source: devlake/charts/grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: devlake-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: devlake-grafana
    namespace: default
roleRef:
  kind: ClusterRole
  name: devlake-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: devlake/charts/grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: devlake-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
rules: []
---
# Source: devlake/charts/grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: devlake-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: devlake-grafana
subjects:
- kind: ServiceAccount
  name: devlake-grafana
  namespace: default
---
# Source: devlake/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: devlake-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
---
# Source: devlake/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: devlake-mysql
  labels:
    helm.sh/chart: devlake-0.19.0-beta5
    app.kubernetes.io/name: devlake
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: devlake
    app.kubernetes.io/instance: devlake
    devlakeComponent: mysql
  ports:
    - protocol: TCP
      name: mysql
      port: 3306
      targetPort: 3306
# devlake services
---
# Source: devlake/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: devlake-lake
  labels:
    helm.sh/chart: devlake-0.19.0-beta5
    app.kubernetes.io/name: devlake
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: devlake
    app.kubernetes.io/instance: devlake
    devlakeComponent: lake
  ports:
    - protocol: TCP
      name: devlake
      port: 8080
      targetPort: 8080
---
# Source: devlake/templates/services.yaml
# ui
apiVersion: v1
kind: Service
metadata:
  name: devlake-ui
  labels:
    helm.sh/chart: devlake-0.19.0-beta5
    app.kubernetes.io/name: devlake
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: devlake
    app.kubernetes.io/instance: devlake
    devlakeComponent: ui
  ports:
    - protocol: TCP
      name: ui
      port: 4000
      targetPort: 4000
      nodePort: 32001
---
# Source: devlake/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devlake-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: devlake
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: devlake
      annotations:
        checksum/config: 031bb4ecc64a8790616e1b628b99e7c581413e3d622772b3baf1b78f9fd9b6b4
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: fa22480e784b7962c5bad95b3c7f452010ba3eaaf31732b544720107bd4ce93b
        kubectl.kubernetes.io/default-container: grafana
    spec:

      serviceAccountName: devlake-grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "devlake.docker.scarf.sh/apache/devlake-dashboard:v0.19.0-beta5"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
            - name: gossip-tcp
              containerPort: 9094
              protocol: TCP
            - name: gossip-udp
              containerPort: 9094
              protocol: UDP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: devlake-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: devlake-grafana
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
            - name: "TZ"
              value: "UTC"
          envFrom:
            - secretRef:
                name: devlake-mysql-auth
                optional: false
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      volumes:
        - name: config
          configMap:
            name: devlake-grafana
        - name: storage
          emptyDir: {}
---
# Source: devlake/templates/deployments.yaml
# devlake-ui
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devlake-ui
  labels:
    helm.sh/chart: devlake-0.19.0-beta5
    app.kubernetes.io/name: devlake
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: devlake
      app.kubernetes.io/instance: devlake
  template:
    metadata:
      labels:
        app.kubernetes.io/name: devlake
        app.kubernetes.io/instance: devlake
        devlakeComponent: ui
    spec:
      containers:
        - name: config-ui
          image: "devlake.docker.scarf.sh/apache/devlake-config-ui:v0.19.0-beta5"
          imagePullPolicy: Always
          ports:
            - containerPort: 4000
          env:
            - name: DEVLAKE_ENDPOINT
              value: devlake-lake.default.svc.cluster.local:8080
            - name: GRAFANA_ENDPOINT
              value: devlake-grafana.default.svc.cluster.local:80
            - name: "TZ"
              value: "UTC"
---
# Source: devlake/templates/deployments.yaml
# devlake
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devlake-lake
  labels:
    helm.sh/chart: devlake-0.19.0-beta5
    app.kubernetes.io/name: devlake
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: devlake
      app.kubernetes.io/instance: devlake
  template:
    metadata:
      labels:
        app.kubernetes.io/name: devlake
        app.kubernetes.io/instance: devlake
        devlakeComponent: lake
    spec:
      initContainers:
        - name: waiting-database-ready
          image: "alpine:3.16"
          imagePullPolicy: IfNotPresent
          command:
            - 'sh'
            - '-c'
            - |
              until nc -z -w 2 devlake-mysql 3306 ; do
                echo wait for database ready ...
                sleep 2
              done
              echo database is ready
      containers:
        - name: lake
          image: "devlake.docker.scarf.sh/apache/devlake:v0.19.0-beta5"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /ping
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 30
          envFrom:
            - secretRef:
                name: devlake-mysql-auth
            - secretRef:
                name: devlake-encryption-secret
          env:
            - name: PORT
              value: "8080"
            - name: API_TIMEOUT
              value: 120s
            - name: API_RETRY
              value: "3"
            - name: API_REQUESTS_PER_HOUR
              value: "10000"
            - name: PIPELINE_MAX_PARALLEL
              value: "1"
            - name: IN_SECURE_SKIP_VERIFY
              value: "false"
            - name: LOGGING_DIR
              value: /app/logs
            - name: LOGGING_LEVEL
              value: info
            - name: "TZ"
              value: "UTC"
---
# Source: devlake/templates/statefulsets.yaml
# database statefulset
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: devlake-mysql
  labels:
    helm.sh/chart: devlake-0.19.0-beta5
    app.kubernetes.io/name: devlake
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: devlake-mysql
  selector:
    matchLabels:
      app.kubernetes.io/name: devlake
      app.kubernetes.io/instance: devlake
  template:
    metadata:
      labels:
        app.kubernetes.io/name: devlake
        app.kubernetes.io/instance: devlake
        devlakeComponent: mysql
    spec:
      containers:
        - name: mysql
          image: "mysql:8"
          imagePullPolicy: IfNotPresent
          args:
            - "mysqld"
            - "--character-set-server=utf8mb4"
            - "--collation-server=utf8mb4_bin"
            - "--skip-log-bin"
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - "mysqladmin ping -u root -p$MYSQL_ROOT_PASSWORD"
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - "mysqladmin ping -u root -p$MYSQL_ROOT_PASSWORD"
            initialDelaySeconds: 5
            timeoutSeconds: 10
          envFrom:
            - secretRef:
                name: devlake-mysql-auth
          env:
            - name: "TZ"
              value: "UTC"
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: devlake-mysql-data
  volumeClaimTemplates:
    - metadata:
        name: devlake-mysql-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "50Gi"
---
# Source: devlake/templates/deployments.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: devlake/templates/ingresses.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: devlake/templates/secrets.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: devlake/templates/services.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# database services
---
# Source: devlake/templates/statefulsets.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: devlake/charts/grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
  name: devlake-grafana-test
  namespace: default
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
---
# Source: devlake/charts/grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: devlake-grafana-test
  namespace: default
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    @test "Test Health" {
      url="http://devlake-grafana/api/health"

      code=$(wget --server-response --spider --timeout 90 --tries 10 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: devlake/charts/grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: devlake-grafana-test
  labels:
    helm.sh/chart: grafana-6.56.6
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/version: "v0.19.0-beta5"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  namespace: default
spec:
  serviceAccountName: devlake-grafana-test
  containers:
    - name: devlake-test
      image: "docker.io/bats/bats:v1.4.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
    - name: tests
      configMap:
        name: devlake-grafana-test
  restartPolicy: Never
